# This CI setup provides a largely homogeneous configuration across all
# major platforms (Windows, MacOS, and Linux). The aim of this test setup is
# to create a "native" platform experience, using as few cross-platform
# helper tools as possible.
#
# On Linux/Mac a virtualenv is used for testing. The effective virtual env
# is available under ~/VENV.
#
# All workers support remote login. Login details are shown at the top of each
# CI run log.
#
# - Linux/Mac workers (via SSH):
#
#   - A permitted SSH key must be defined in an APPVEYOR_SSH_KEY environment
#     variable (via the appveyor project settings)
#
#   - SSH login info is given in the form of: 'appveyor@67.225.164.xx -p 22xxx'
#
#   - Login with:
#
#     ssh -o StrictHostKeyChecking=no <LOGIN>
#
#   - to prevent the CI run from exiting, `touch` a file named `BLOCK` in the
#     user HOME directory (current directory directly after login). The session
#     will run until the file is removed (or 60 min have passed)
#
# - Windows workers (via RDP):
#
#   - An RDP password should be defined in an APPVEYOR_RDP_PASSWORD environment
#     variable (via the appveyor project settings), or a random password is used
#     every time
#
#   - RDP login info is given in the form of IP:PORT
#
#   - Login with:
#
#     xfreerdp /cert:ignore /dynamic-resolution /u:appveyor /p:<PASSWORD> /v:<LOGIN>
#
#   - to prevent the CI run from exiting, create a textfile named `BLOCK` on the
#     Desktop (a required .txt extension will be added automatically). The session
#     will run until the file is removed (or 60 min have passed)
#
#   - in a terminal execute, for example, `C:\datalad_debug.bat 39` to set up the
#     environment to debug in a Python 3.9 session (should generally match the
#     respective CI run configuration).


# make repository clone cheap
shallow_clone: true


environment:
  # Do not use `image` as a matrix dimension, to have fine-grained control over
  # what tests run on which platform
  # The ID variable had no impact, but sorts first in the CI run overview
  # an intelligible name can help to locate a specific test run
  matrix:
    # List a CI run for each platform first, to have immediate access when there
    # is a need for debugging

    # Ubuntu core tests
    - ID: Ubu22
      APPVEYOR_BUILD_WORKER_IMAGE: Ubuntu2204
      PY: 3.10
      INSTALL_SYSPKGS: libffi7 python3-venv
      # system git-annex is way too old, use better one
      INSTALL_GITANNEX: git-annex -m deb-url --url http://snapshot.debian.org/archive/debian/20201228T023115Z/pool/main/g/git-annex/git-annex_8.20201127-1_amd64.deb
    # Windows core tests
    - ID: WinP39core
      APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2019
      # Python version specification is non-standard on windows
      PY: 39-x64
      INSTALL_GITANNEX: git-annex -m datalad/packages
    # MacOS core tests
    - ID: MacP310core
      APPVEYOR_BUILD_WORKER_IMAGE: macos-monterey
      PY: 3.10
      # does not give a functional installation
      # INSTALL_GITANNEX: git-annex -m snapshot
      #INSTALL_GITANNEX: git-annex=8.20201129
      INSTALL_GITANNEX: git-annex

    - ID: MacP310a1
      APPVEYOR_BUILD_WORKER_IMAGE: macos-monterey
      PY: 3.10
      INSTALL_GITANNEX: git-annex
    - ID: MacP310a2
      APPVEYOR_BUILD_WORKER_IMAGE: macos-monterey
      PY: 3.10
      INSTALL_GITANNEX: git-annex
    - ID: MacP310a3
      APPVEYOR_BUILD_WORKER_IMAGE: macos-monterey
      PY: 3.10
      INSTALL_GITANNEX: git-annex

    # Test alternative Python versions
    - ID: Ubu20P39
      PY: 3.9
      APPVEYOR_BUILD_WORKER_IMAGE: Ubuntu2004
      INSTALL_SYSPKGS: python3-venv
      # system git-annex is way too old, use better one
      INSTALL_GITANNEX: git-annex -m deb-url --url http://snapshot.debian.org/archive/debian/20201228T023115Z/pool/main/g/git-annex/git-annex_8.20201127-1_amd64.deb

# it is OK to specify paths that may not exist for a particular test run
cache:
  # pip cache
  - C:\Users\appveyor\AppData\Local\pip\Cache -> .appveyor.yml
  - /home/appveyor/.cache/pip -> .appveyor.yml
  # TODO: where is the cache on macos-monterey?
  #- /Users/appveyor/.cache/pip -> .appveyor.yml
  # TODO: Can we cache `brew`?
  #- /usr/local/Cellar
  #- /usr/local/bin


# turn off support for MS project build support (not needed)
build: off


# init cannot use any components from the repo, because it runs prior to
# cloning it
init:
  # Scratch space
  - cmd: md C:\DLTMP
  # we place the "unix" one into the user's HOME to avoid git-annex issues on MacOSX
  # gh-5291
  - sh: mkdir ~/DLTMP
  # and use that scratch space to get short paths in test repos
  # (avoiding length-limits as much as possible)
  - cmd: "set TMP=C:\\DLTMP"
  - cmd: "set TEMP=C:\\DLTMP"
  - sh: export TMPDIR=~/DLTMP

install:
  # If a particular Python version is requested, use env setup (using the
  # appveyor provided environments/installation). Note, these are broken
  # on the ubuntu images
  # https://help.appveyor.com/discussions/problems/28217-appveyor-ubunu-image-with-python3-lzma-module
  # Otherwise create a virtualenv using the default Python 3, to enable uniform
  # use of python/pip executables below
  - sh: "[ \"x$PY\" != x ] && . ${HOME}/venv${PY}/bin/activate || python${PY} -m venv ${HOME}/dlvenv && . ${HOME}/dlvenv/bin/activate; ln -s \"$VIRTUAL_ENV\" \"${HOME}/VENV\""
  - cmd: "set PATH=C:\\Python%PY%;C:\\Python%PY%\\Scripts;%PATH%"
  # Missing system software
  - sh: "[ -n \"$INSTALL_SYSPKGS\" ] && ( [ \"x${APPVEYOR_BUILD_WORKER_IMAGE}\" = \"xmacos-monterey\" ] && brew install -q ${INSTALL_SYSPKGS} || { sudo apt-get update; sudo apt-get install --no-install-recommends -y ${INSTALL_SYSPKGS} ; } ) || true"
  - python -m pip install .

test_script:
  - cmd: datalad-installer --sudo ok %INSTALL_GITANNEX%
  - sh: datalad-installer --sudo ok ${INSTALL_GITANNEX}

on_finish:
  # conditionally block the exit of a CI run for direct debugging
  - sh: while [ -f ~/BLOCK ]; do sleep 5; done
  - cmd: powershell.exe while ((Test-Path "C:\Users\\appveyor\\Desktop\\BLOCK.txt")) { Start-Sleep 5 }
